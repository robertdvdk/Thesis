"""
Pairs UniProt IDs with corresponding Gene IDs and promoter sequences to domains

Author: Robert van der Klis

Usage: python3 pair_promoters_domains.py {processed directory}
"""
# Import statements
import os
import sys

# Function definitions
def retrieve_proms_protids(processed_dir):
    """Retrieves gene IDs, UniProt IDs, and promoter sequences from the file
    generated by pair_promoters_proteins.py

    Args:
        processed_dir::str
            The directory containing all processed files

    Returns:
        seq_dict::dict
            A dictionary of {species:
                {UniProtID: [GeneID, promoter sequence, []]}}
    """
    seq_dict = {}
    for file in os.listdir(f'{processed_dir}/paired_sequences'):
        species = file.split('.')[0]
        seq_dict[species] = {}
        with open(f'{processed_dir}/paired_sequences/{file}') as fopen:
            for line in fopen:
                if line.startswith('GENEID'):
                    curr_geneid = line.split()[1]
                elif line.startswith('UPID'):
                    curr_upid = line.split()[1]
                elif line.startswith('PROMSEQ'):
                    curr_promseq = line.split()[1]
                    seq_dict[species][curr_upid] = [curr_geneid, curr_promseq, []]
    return seq_dict

def find_domains(seq_dict, processed_dir):
    """Finds domains corresponding to each UniProt ID

    Args:
        seq_dict::dict
            A dictionary of {species:
                {UniProtID: [GeneID, promoter sequence, []]}}
        processed_dir::str
            The directory containing all processed files

    Returns:
        seq_dict::dict
            Dictionary of {species:
                {UniProtID: [GeneID, promoter sequence, [domains]]}}
    """
    ipr_file = f'{processed_dir}/interpro/relevant_protein2ipr.txt'
    for species_seq_dict in seq_dict.values():
        # Avoid having to load the entire domains file into memory
        with open(ipr_file) as fopen:
            for line in fopen:
                prot_id = line.split()[0].strip()
                domain = line.split()[1].strip()
                if prot_id in species_seq_dict:
                    if domain not in species_seq_dict[prot_id][2]:
                        species_seq_dict[prot_id][2].append(domain)
    return seq_dict

def main():
    if len(sys.argv) != 2:
        print('Usage: python3 pair_promoters_domains.py {processed directory}')
    processed_dir = sys.argv[1]

    # Step 1: Retrieve gene IDs, UniProt IDs, and promoter sequences
    seq_dict = retrieve_proms_protids(processed_dir)

    # Step 2: Find corresponding domains and add to dict
    seq_dict = find_domains(seq_dict, processed_dir)

    # Step 3: Write to file
    if not os.path.exists(f'{processed_dir}/domains'):
        os.system(f'mkdir {processed_dir}/domains')
    for species, info in seq_dict.items():
        with open(f'{processed_dir}/domains/{species}.txt', 'w') as fopen:
            for prot_id, (curr_geneid, curr_promseq, domains) in info.items():
                domains_str = " ".join(domains)
                fopen.write(f'UPID: {prot_id}\nGENEID: {curr_geneid}\nPROMSEQ: {curr_promseq}\nDOMAINS: {domains_str}\n')

if __name__ == "__main__":
    """The main function of this module"""
    main()
